"""
simple simple simple
all samples in the project with 'proband' in the internal ID
"""


import json
import subprocess
from shlex import quote

import click
import requests


def get_auth() -> str:
    """
    uses a shell to execute the auth token grab
    :return: str: the token generated by the gcloud process

    This will only work as a locally executed script
    """
    return (
        subprocess.check_output(['gcloud', 'auth', 'print-identity-token'])
        .decode()
        .strip()
    )


def get_response(url, headers, query_params=None) -> requests.Response:
    """
    perform the actual execution of the URL with provided parameters
    :param url: str
    :param headers: dict
    :param query_params: [optional] dict
    :return: requests.Response
    """

    resp = requests.get(headers=headers, url=url, params=query_params)

    # raise exception if `not resp.ok`
    resp.raise_for_status()

    return resp


@click.command()
@click.option(
    '--project',
    'project',
    type=click.STRING,
    help='the name of the project to use in API queries',
)
def main(project: str):
    """
    main process, using click args
    """

    auth_token = get_auth()

    # currently the 2 types of endpoint require different headers, with the same auth token
    mapping_header = {'Accept': ACCEPT_JSON, 'Authorization': f'Bearer {auth_token}'}

    # we can obtain a lookup on the internal sample ID using the external PID
    # participant/acute-care/external-pid-to-internal-sample-id # JSON
    # this will get us a CPG ID (INTernal, not INTeger)
    response = get_response(
        url=f'{URL_BASE}/{PARTICIPANT_ENDPOINT}/{project}/external-pid-to-internal-sample-id',
        headers=mapping_header,
    )
    paired_samples_list = response.json()

    # probably a more sophisticated check required
    # but for now most of the names include '_proband'
    proband_dict = {'probands': [_[1] for _ in paired_samples_list if 'proband' in _[0]]}

    # now print as a string value, with no spaces
    json_string = json.dumps(
        proband_dict,
        separators=(',', ':')
    )
    replace_dict = {
        '{': r'\{',
        '}': r'\}',
        ']': r'\]',
        '[': r'\[',
        ',': r'\,',
        ':': r'\:',
        '"': r'\"',
    }

    # escape to replace
    for key, var in replace_dict.items():
        json_string = json_string.replace(key, var)

    print(quote(json_string))


URL_BASE = 'https://sample-metadata-api-mnrpw3mdza-ts.a.run.app/api/v1'
ACCEPT_JSON = 'application/json'
PARTICIPANT_ENDPOINT = 'participant'


if __name__ == '__main__':
    main()  # pylint: disable=E1120
